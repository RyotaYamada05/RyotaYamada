//=============================================================================
//
// メイン処理 [ui.cpp]
// Author : 山田陵太
//
//=============================================================================
#include "ui.h"
#include "life.h"
#include "score.h"
#include "scene2d.h"
#include "manager.h"
#include "renderer.h"
#include "animalui.h"
#include "skill.h"

//=============================================================================
//静的メンバ変数宣言
//=============================================================================
CLife *CUi::m_pLife = NULL;
CSkill *CUi::m_pSkill = NULL;
CScore * CUi::m_pScore = NULL;
CAnimalUi * CUi::m_pAnimalUI = NULL;
LPDIRECT3DTEXTURE9 CUi::m_pTexture = NULL;
//=============================================================================
//UIクラスのコンストラクタ
//=============================================================================
CUi::CUi()
{
	m_pScene2D = NULL;
}

//=============================================================================
//UIクラスのデストラクタ
//=============================================================================
CUi::~CUi()
{
}

CUi * CUi::Create(void)
{
	CUi *pUi = NULL;

	pUi = new CUi;

	if (pUi != NULL)
	{
		pUi->Init();
	}
	else
	{
		return NULL;
	}
	return pUi;
}

//=============================================================================
//UIクラスのテクスチャの読み込み処理
//=============================================================================
HRESULT CUi::Load(void)
{
	//デバイス情報の取得
	LPDIRECT3DDEVICE9 pD3DDevice = CManager::GetRenderer()->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pD3DDevice, "data/Texture/UI/UnderUI.png", &m_pTexture);

	return S_OK;
}

//=============================================================================
//UIクラスのテクスチャの破棄処理
//=============================================================================
void CUi::UnLoad(void)
{
	//テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//=============================================================================
//UIクラスの初期化処理
//=============================================================================
HRESULT CUi::Init(void)
{
	//上側UI用ポリゴン生成
	m_pScene2D = CScene2D::Create(D3DXVECTOR3(SCREEN_WIDTH / 2, 0.0f + UNDER_UI_SIZE_Y / 2, 0.0f), UNDER_UI_SIZE, CScene::PRIORITY_UI);
	m_pScene2D->BindTexture(m_pTexture);

	//スコアクラスの生成
	m_pScore = CScore::Create(D3DXVECTOR3(100.0f, 200.0f, 0.0f), D3DXVECTOR3(1000.0f, 200.0f, 0.0f));

	//スキルクラスの生成
	m_pSkill = CSkill::Create(D3DXVECTOR3(100.0f, 200.0f, 0.0f), D3DXVECTOR3(1000.0f, 200.0f, 0.0f));

	//ライフクラスの生成
	m_pLife = CLife::Create(D3DXVECTOR3(100.0f, 200.0f, 0.0f), D3DXVECTOR3(1000.0f, 200.0f, 0.0f));

	//アニマルUIクラスの生成
	m_pAnimalUI = CAnimalUi::Create(D3DXVECTOR3(100.0f, 200.0f, 0.0f), D3DXVECTOR3(1000.0f, 200.0f, 0.0f));

	

	return S_OK;
}

//=============================================================================
//UIクラスの終了処理
//=============================================================================
void CUi::Uninit(void)
{
}

//=============================================================================
//UIクラスの更新処理
//=============================================================================
void CUi::Update(void)
{
}

//=============================================================================
//UIクラスの描画処理
//=============================================================================
void CUi::Draw(void)
{
}

//=============================================================================
//スコア情報取得
//=============================================================================
CScore * CUi::GetScore(void)
{
	return m_pScore;
}

//=============================================================================
//ライフ情報取得
//=============================================================================
CLife * CUi::GetLife(void)
{
	return m_pLife;
}

CSkill * CUi::GetSkill(void)
{
	return m_pSkill;
}

CAnimalUi * CUi::GetAnimalUI(void) 
{
	return m_pAnimalUI;
}
