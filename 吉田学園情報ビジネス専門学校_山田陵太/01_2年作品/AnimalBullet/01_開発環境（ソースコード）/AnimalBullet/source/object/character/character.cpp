//=============================================================================
//
// キャラクター処理 [character.cpp]
// Author : 山田陵太
//
//=============================================================================
#include "character.h"

//=============================================================================
//マクロ定義
//=============================================================================
#define END_DAMAGE_FRAME 30 //ダメージ処理の終了フレーム

//=============================================================================
//キャラクタークラスのコンストラクタ
//=============================================================================
CCharacter::CCharacter(int nPriority) : CScene2D(nPriority)
{
	//メンバ変数の初期化
	m_state = CHARACTER_STATE_NORMAL;
	m_nLife = 0;
	m_nMaxLife = 0;
	m_nStateCounter = 0;
}

//=============================================================================
//キャラクタークラスのデストラクタ
//=============================================================================
CCharacter::~CCharacter()
{
}

//=============================================================================
//キャラクタークラスの状態判定処理
//=============================================================================
CHARACTER_STATE CCharacter::CheckState(void)
{
	switch (m_state)
	{
		//通常状態
	case CHARACTER_STATE_NORMAL:
		break;

		//ダメージを受けた状態
	case CHARACTER_STATE_DAMAGE:

		if (m_nStateCounter >= END_DAMAGE_FRAME)
		{
			//色を戻す
			SetColor(COLOR_WHITE);

			//カウンターのクリア
			m_nStateCounter = 0;

			//通常の状態に戻す
			m_state = CHARACTER_STATE_NORMAL;
		}
		else if (m_nStateCounter % 10 <= 5)
		{
			SetColor(COLOR_ALPHA);
		}
		else
		{
			SetColor(COLOR_WHITE);
		}

		//カウンターのアップ
		m_nStateCounter++;

		break;

		//死んでいる状態
	case CHARACTER_STATE_DIED:

		SetColor(COLOR_WHITE);

		//死亡処理実行
		DiedProcess();

		break;
	}

	return m_state;
}

//=============================================================================
//キャラクタークラスの状態設定処理
//=============================================================================
void CCharacter::SetState(CHARACTER_STATE state)
{
	m_state = state;
}

//=============================================================================
//キャラクタークラスの状態取得処理
//=============================================================================
CHARACTER_STATE CCharacter::GetState(void)
{
	return m_state;
}

//=============================================================================
//キャラクタークラスのライフの初期化処理
//=============================================================================
void CCharacter::InitLife(int nDefaultLife)
{
	//最大ライフと現在ライフを設定
	SetMaxLife(nDefaultLife);
	SetLife(nDefaultLife);
}

//=============================================================================
//キャラクタークラスの現在ライフ加算処理
//=============================================================================
int CCharacter::AddLife(const int nAddValue)
{
	m_nLife += nAddValue;

	//体力の最大値を超えた場合最大値に修正
	if (m_nLife > m_nMaxLife)
	{
		m_nLife = m_nMaxLife;
	}

	return m_nLife;
}

//=============================================================================
//キャラクタークラスの現在ライフ減算処理
//=============================================================================
int CCharacter::SubLife(const int nSubValue)
{
	m_nLife -= nSubValue;

	return m_nLife;
}

//=============================================================================
//キャラクタークラスの現在ライフ設定処理
//=============================================================================
void CCharacter::SetLife(const int nLife)
{
	m_nLife = nLife;

	//体力の最大値を超えた場合最大値に修正
	if (m_nLife > m_nMaxLife)
	{
		m_nLife = m_nMaxLife;
	}
}

//=============================================================================
//キャラクタークラスの最大ライフ設定処理
//=============================================================================
void CCharacter::SetMaxLife(const int nMaxLife)
{
	m_nMaxLife = nMaxLife;
}

//=============================================================================
//キャラクタークラスの現在ライフ取得処理
//=============================================================================
int CCharacter::GetLife(void)
{
	return m_nLife;
}

//=============================================================================
//キャラクタークラスの最大ライフ取得処理
//=============================================================================
int CCharacter::GetMaxLife(void)
{
	return m_nMaxLife;
}