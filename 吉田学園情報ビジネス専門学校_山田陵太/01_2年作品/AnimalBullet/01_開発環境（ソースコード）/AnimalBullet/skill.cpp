//=============================================================================
//
// スキル処理 [skill.cpp]
// Author : 山田陵太
//
//=============================================================================
#include "skill.h"
#include "gauge.h"

//=============================================================================
//マクロ定義
//=============================================================================
#define MAX_SKILL 100	//スキルの最大値

//=============================================================================
//スキルクラスのコンストラクタ
//=============================================================================
CSkill::CSkill(int nPriority):CScene(nPriority)
{
	m_nSkillCounter = MAX_SKILL;
	m_pGauge = NULL;
}

//=============================================================================
//スキルクラスのデストラクタ
//=============================================================================
CSkill::~CSkill()
{
}

//=============================================================================
//スキルクラスのクリエイト処理
//=============================================================================
CSkill * CSkill::Create(const D3DXVECTOR3 pos, const D3DXVECTOR3 size)
{
	//スキルクラスのポインタ変数
	CSkill *pSkill = NULL;

	//メモリの確保
	pSkill = new CSkill;

	//メモリが確保できていたら
	if (pSkill != NULL)
	{
		//初期化処理呼び出し
		pSkill->Init(pos, size);
	}
	//メモリ確保に失敗したとき
	else
	{
		return NULL;
	}
	return pSkill;
}

//=============================================================================
//スキルクラスの初期化処理
//=============================================================================
HRESULT CSkill::Init(const D3DXVECTOR3 pos, const D3DXVECTOR3 size)
{
	//ゲージクラスの生成
	m_pGauge = CGauge::Create(D3DXVECTOR3(100.0f, 41, 0.0f), SKILL_GAGUE_SIZE, 
		m_nSkillCounter, CGauge::GAUGE_TYPE_SKILL);

	return S_OK;
}

//=============================================================================
//スキルクラスの終了処理
//=============================================================================
void CSkill::Uninit(void)
{
	if (m_pGauge != NULL)
	{
		//ゲージクラスの終了処理呼び出し
		m_pGauge->Uninit();

		//メモリの破棄
		delete m_pGauge;

		//メモリのクリア
		m_pGauge = NULL;
	}

	//オブジェクトの破棄
	SetDeathFlag();
}

//=============================================================================
//スキルクラスの更新処理
//=============================================================================
void CSkill::Update(void)
{
	if (m_pGauge != NULL)
	{

		//ゲージクラスの更新
		m_pGauge->Update();
	}
}

//=============================================================================
//スキルクラスの描画処理
//=============================================================================
void CSkill::Draw(void)
{
	if (m_pGauge != NULL)
	{
		//ゲージクラスの描画
		m_pGauge->Draw();
	}
}

//=============================================================================
//スキルクラスの取得処理
//=============================================================================
int CSkill::GetSkill(void) const
{
	return m_nSkillCounter;
}

//=============================================================================
//スキルクラスの設定処理
//=============================================================================
void CSkill::SetSkill(const int nSkill)
{
	m_nSkillCounter = nSkill;

	//最大値を超えた場合、最大値へ修正する
	if (m_nSkillCounter >= MAX_SKILL)
	{
		m_nSkillCounter = MAX_SKILL;
	}

	//ゲージクラスへ値を設定する
	m_pGauge->SetGauge(m_nSkillCounter);
}

//=============================================================================
//スキルクラスの加算処理
//=============================================================================
void CSkill::AddSkill(const int nSkill)
{
	m_nSkillCounter += nSkill;

	//最大値を超えた場合、最大値へ修正する
	if (m_nSkillCounter >= MAX_SKILL)
	{
		m_nSkillCounter = MAX_SKILL;
	}

	//ゲージクラスへ値を設定する
	m_pGauge->SetGauge(m_nSkillCounter);
}
